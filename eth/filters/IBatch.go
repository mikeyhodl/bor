// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethereum/go-ethereum/ethdb (interfaces: Batch)
//
// Generated by this command:
//
//	mockgen -destination=../eth/filters/IBatch.go -package=filters . Batch
//

// Package filters is a generated GoMock package.
package filters

import (
	reflect "reflect"

	ethdb "github.com/ethereum/go-ethereum/ethdb"
	gomock "go.uber.org/mock/gomock"
)

// MockBatch is a mock of Batch interface.
type MockBatch struct {
	ctrl     *gomock.Controller
	recorder *MockBatchMockRecorder
	isgomock struct{}
}

// MockBatchMockRecorder is the mock recorder for MockBatch.
type MockBatchMockRecorder struct {
	mock *MockBatch
}

// NewMockBatch creates a new mock instance.
func NewMockBatch(ctrl *gomock.Controller) *MockBatch {
	mock := &MockBatch{ctrl: ctrl}
	mock.recorder = &MockBatchMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBatch) EXPECT() *MockBatchMockRecorder {
	return m.recorder
}

// Delete mocks base method.
func (m *MockBatch) Delete(key []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockBatchMockRecorder) Delete(key any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockBatch)(nil).Delete), key)
}

// Put mocks base method.
func (m *MockBatch) Put(key, value []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Put indicates an expected call of Put.
func (mr *MockBatchMockRecorder) Put(key, value any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockBatch)(nil).Put), key, value)
}

// Replay mocks base method.
func (m *MockBatch) Replay(w ethdb.KeyValueWriter) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Replay", w)
	ret0, _ := ret[0].(error)
	return ret0
}

// Replay indicates an expected call of Replay.
func (mr *MockBatchMockRecorder) Replay(w any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Replay", reflect.TypeOf((*MockBatch)(nil).Replay), w)
}

// Reset mocks base method.
func (m *MockBatch) Reset() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Reset")
}

// Reset indicates an expected call of Reset.
func (mr *MockBatchMockRecorder) Reset() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reset", reflect.TypeOf((*MockBatch)(nil).Reset))
}

// ValueSize mocks base method.
func (m *MockBatch) ValueSize() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ValueSize")
	ret0, _ := ret[0].(int)
	return ret0
}

// ValueSize indicates an expected call of ValueSize.
func (mr *MockBatchMockRecorder) ValueSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ValueSize", reflect.TypeOf((*MockBatch)(nil).ValueSize))
}

// Write mocks base method.
func (m *MockBatch) Write() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write")
	ret0, _ := ret[0].(error)
	return ret0
}

// Write indicates an expected call of Write.
func (mr *MockBatchMockRecorder) Write() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockBatch)(nil).Write))
}

func (m *MockBatch) DeleteRange(start, end []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteRange", start, end)
	ret0, _ := ret[0].(error)
	return ret0
}

func (mr *MockBatchMockRecorder) DeleteRange(start, end any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteRange", reflect.TypeOf((*MockBatch)(nil).DeleteRange), start, end)
}
