name: CI

on:
  push:
    branches:
      - 'master'
      - 'develop'
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize]

concurrency:
  group: build-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build

    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-22.04] # List of OS: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4
      - run: |
          git submodule update --init --recursive --force
          git fetch --no-tags --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.6

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Build
        run: make all

  lint:
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-22.04] # List of OS: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git submodule update --init --recursive --force
          git fetch --no-tags --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.6

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - name: Golang-ci install
        if: runner.os == 'Linux'
        run: make lintci-deps

      - name: Lint
        if: runner.os == 'Linux'
        run: make lint

  unit-tests:
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-22.04] # List of OS: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git submodule update --init --recursive --force
          git fetch --no-tags --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.6

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: Test
        run: make test

      - uses: PaloAltoNetworks/upload-secure-artifact@main
        with:
          name: unitTest-coverage
          path: cover.out

  # - name: Data race tests
  #   run: make test-race

  # # TODO: make it work
  # - name: Reproducible build test
  #   run: |
  #       make geth
  #       shasum -a256 ./build/bin/geth > bor1.sha256
  #       make geth
  #       shasum -a256 ./build/bin/geth > bor2.sha256
  #       if ! cmp -s bor1.sha256 bor2.sha256; then
  #         echo >&2 "Reproducible build broken"; cat bor1.sha256; cat bor2.sha256; exit 1
  #       fi

  integration-tests:
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-22.04] # List of OS: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - run: |
          git submodule update --init --recursive --force
          git fetch --no-tags --prune --depth=1 origin +refs/heads/master:refs/remotes/origin/master

      - uses: actions/setup-go@v5
        with:
          go-version: 1.24.6

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: sudo apt update && sudo apt install build-essential

      - uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: ${{ runner.os }}-go-

      - name: test-integration
        run: make test-integration

      - uses: PaloAltoNetworks/upload-secure-artifact@main
        with:
          name: integrationTest-coverage
          path: cover.out

  codecov:
    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-22.04] # List of OS: https://github.com/actions/virtual-environments
    runs-on: ${{ matrix.os }}
    needs: [unit-tests, integration-tests]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Download artifacts
        uses: actions/download-artifact@v4.1.8
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
